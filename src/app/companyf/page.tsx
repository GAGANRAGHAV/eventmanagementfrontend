"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/mG2ls10fCwp
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { useEffect, useState } from "react";
import axios from "axios";

interface CompanyData {
  _id: string;
  name: string;
  description: string;
  moneyrequired: number;
  location: string;
  eventDate: string;
  // Add other properties as needed
}

export default function companyf() {
  const [projects, setProjects] = useState<CompanyData[]>([]);
  const [filteredProjects, setFilteredProjects] = useState<CompanyData[]>([]);
  const [uniqueLocations, setUniqueLocations] = useState<string[]>([]);
  const [priceFilter, setPriceFilter] = useState<number | null>(null);
  const [locationFilter, setLocationFilter] = useState("");
  const [eventDate, setEventDate] = useState(""); // New state for event date
  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      const response = await axios.get("https://eventmanagementbackend-o7k8.onrender.com/api/getprojects");
      setProjects(response.data.project);
      const projectData = response.data.project;

      const locations = projectData.map(
        (project: CompanyData) => project.location
      );
      const uniqueLocs = Array.from(new Set(locations)) as string[];
      setUniqueLocations(uniqueLocs);
      console.log(response.data.project);
      setFilteredProjects(response.data.project); // Initialize with all projects
    } catch (error) {
      console.error("Error fetching events:", error);
    }
  };

  const applyFilters = () => {
    let filtered = projects;

    if (locationFilter) {
      filtered = filtered.filter((project) =>
        project.location.includes(locationFilter)
      );
    }

    if (priceFilter) {
      filtered = filtered.filter(
        (project) => project.moneyrequired <= priceFilter
      );
    }

    setFilteredProjects(filtered);
  };

  useEffect(() => {
    applyFilters();
  }, [locationFilter, priceFilter]);

  return (
    <div className="flex flex-col min-h-screen bg-background">
      <header className="bg-primary text-primary-foreground py-4 px-6 flex items-center justify-between">
        <Link
          href="#"
          className="flex items-center gap-2 text-lg font-bold"
          prefetch={false}
        >
          {/* <GiftIcon className="w-6 h-6" /> */}
          User Side
        </Link>
        <div className="flex items-center gap-4">
          <Link
            href="/"
            className="inline-flex h-9 items-center justify-center rounded-md bg-primary-foreground px-4 py-2 text-sm font-medium text-primary shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
            prefetch={false}
          >
            Logout{" "}
          </Link>
          {/* <Link
            href="#"
            className="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
            prefetch={false}
          >
            Login
          </Link> */}
        </div>
      </header>
      <main className="flex-1 py-12 px-4 md:px-6">
        <section className="max-w-5xl mx-auto">
          <div className="flex items-center justify-between mb-8">
            <h1 className="text-3xl font-bold">Explore Events</h1>
            <div className="flex items-center gap-4">
              {/* <Button
                variant="outline"
                size="sm"
                onClick={() => applyFilters()}
              >
                <FilterIcon className="w-4 h-4 mr-2" />
                Filter
              </Button>
              <Button variant="outline" size="sm">
                <ListOrderedIcon className="w-4 h-4 mr-2" />
                Sort
              </Button> */}
            </div>
          </div>
          {/* <div className="mb-4 flex gap-4">
            <select
              value={locationFilter}
              onChange={(e) => setLocationFilter(e.target.value)}
              className="p-2 border border-gray-300 rounded"
            >
              <option value="">All Locations</option>
              {uniqueLocations.map((location) => (
                <option key={location} value={location}>
                  {location}
                </option>
              ))}
            </select>

            <select
              value={priceFilter || ""}
              onChange={(e) => setPriceFilter(parseInt(e.target.value) || null)}
              className="p-2 border border-gray-300 rounded"
            >
              <option value="">All Price Ranges</option>
              <option value="10000">Up to 10,000</option>
              <option value="50000">Up to 50,000</option>
              <option value="100000">Up to 100,000</option>
              Add more price ranges
            </select>
          </div> */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredProjects.map((e) => (
              <Card key={e._id}>
                <CardHeader>
                  <CardTitle>{e.name}</CardTitle>
                  <CardDescription>{e.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm text-muted-foreground">
                      Prize Pool: Rs {e.moneyrequired}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      Progress: 75%
                    </div>
                  </div>
                  <Progress value={75} />
                </CardContent>
                <CardFooter>
                  <Link
                    href={`/companyf/${e._id}`}
                    className="inline-flex h-9 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                    prefetch={false}
                  >
                    View Details
                  </Link>
                </CardFooter>
              </Card>
            ))}
          </div>
        </section>
      </main>
      <footer className="bg-muted text-muted-foreground py-6 px-4 md:px-6">
        <div className="max-w-5xl mx-auto flex items-center justify-between">
          <div className="text-sm">
            &copy; 2025 Event Management. All rights reserved.
          </div>
          <div className="flex items-center gap-4">
            <Link href="#" className="text-sm hover:underline" prefetch={false}>
              About
            </Link>
            <Link href="#" className="text-sm hover:underline" prefetch={false}>
              Contact
            </Link>
            <Link href="#" className="text-sm hover:underline" prefetch={false}>
              Privacy
            </Link>
            <Link href="#" className="text-sm hover:underline" prefetch={false}>
              Terms
            </Link>
          </div>
        </div>
      </footer>
    </div>
  );
}

function FilterIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}

function GiftIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="3" y="8" width="18" height="4" rx="1" />
      <path d="M12 8v13" />
      <path d="M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7" />
      <path d="M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5" />
    </svg>
  );
}

function ListOrderedIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="10" y1="6" x2="21" y2="6" />
      <line x1="10" y1="12" x2="21" y2="12" />
      <line x1="10" y1="18" x2="21" y2="18" />
      <polyline points="5 6 4 8 3 6" />
      <path d="M4 16h1v6H3" />
      <path d="M4 10a1 1 0 0 0 0-2H3v2h1z" />
    </svg>
  );
}
